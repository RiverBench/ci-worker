package io.github.riverbench.ci_worker
package util.doc

import util.{Constants, PurlMaker}

object MarkdownUtil:
  private val sizeSuffixes = Seq("B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB")

  val indent = "    "

  def prettyLabel(label: String, comment: Option[String]): String =
    comment match
      case Some(c) =>
        val cClean = c.replace('"', '\'').replace("\n", " ")
        f"<abbr title=\"$cClean\">$label</abbr>"
      case None => label

  def formatInt(v: String): String =
    v.strip
      .reverse
      .grouped(3)
      .mkString(",")
      .reverse

  def formatDouble(v: String): String =
    v.strip.toDoubleOption
      .map(d => f"$d%,.2f")
      .getOrElse(v)

  def formatSize(v: Long): String =
    def inner(d: Double): (Int, Double) =
      if d < 1024 then
        (0, d)
      else
        val (i, d2) = inner(d / 1024d)
        (i + 1, d2)
    val (level, d) = inner(v.toDouble)
    f"$d%.1f ${sizeSuffixes(level)}"

  def formatMetadataLinks(baseUrl: String, suffix: String = ""): String =
    f"**[Turtle]($baseUrl.ttl$suffix)**, **[N-Triples]($baseUrl.nt$suffix)**, " +
      f"**[RDF/XML]($baseUrl.rdf$suffix)**, **[Jelly]($baseUrl.jelly$suffix)**"
    
  def formatDatasetMetadataLinks(baseUrl: String, suffix: String = ""): String =
    f"**[TriG]($baseUrl.trig$suffix)**, **[N-Quads]($baseUrl.nq$suffix)**, " +
      f"**[Jelly]($baseUrl.jelly$suffix)**"

  def formatPurlLink(purl: String): String =
    f"<abbr title=\"The permanent URL is guaranteed to never change and also allows for retrieving machine-readable " +
      f"metadata in RDF. You should always use permanent URLs to refer to tasks, profiles, or datasets in " +
      f"RiverBench.\">:material-link-variant: Permanent URL:</abbr> [`$purl`]($purl)"

  def makeTopButtons(purl: PurlMaker.Purl, fileDepth: Int): String =
    val editLink = if purl.version != "dev" then
      Some(f"<div markdown><abbr title=\"This page corresponds to a stable release of RiverBench, so it cannot " +
        f"be edited. If you want to edit this page, go to the development version by selecting 'dev' from the " +
        f"version selector in the top navigation bar.\">" +
        f":material-lock-check: Stable: ${purl.version}</abbr></div>")
    else if purl.kind == "tasks" && purl.subpage.contains("results") then
      Some(f"<div markdown><abbr title=\"This page is entirely automatically generated and cannot be edited.\">" +
        f":material-lock-reset: Auto-generated</abbr></div>")
    else
      val intermediate = purl.kind match
        case "datasets" => Seq((f"dataset-${purl.id}", "metadata.ttl", "page"))
        case "categories" => Seq((f"category-${purl.id}", "metadata.ttl", "page"))
        case "tasks" =>
          val repo = "category-" + purl.id.split('-').head
          Seq(
            (repo, f"tasks/${purl.id}/index.md", "page"),
            (repo, f"tasks/${purl.id}/metadata.ttl", "metadata"),
          )
        case "profiles" =>
          val repo = "category-" + purl.id.split('-').head
          Seq((repo, f"profiles/${purl.id}.ttl", "page"))
        case "schema" => Seq(("schema", f"src/${purl.id}.ttl", "ontology"))
        case _ => Seq()
      if intermediate.isEmpty then None
      else
        val editLinks =
          intermediate.map((repo, file, kind) => {
            val (icon, format) = if file.endsWith(".ttl") then ("database", "RDF/Turtle") else ("file", "Markdown")
            f"<div markdown>**[:material-$icon-edit: Edit ${if kind == "page" then "this page" else kind}]" +
              f"(${Constants.baseRepoUrl}/$repo/edit/main/$file " +
              f"\"Edit this page's ${if kind == "page" then "source" else kind} in $format on GitHub.\")**</div>"
          })
        Some(editLinks.mkString + f"<div markdown>[:material-help-circle:]" +
          f"(${"../".repeat(fileDepth)}documentation/editing-docs.md " +
          f"\"Need help with editing?\")</div>")
    val inner = f"<div markdown>[:material-link-variant: Permanent URL]" +
      f"(${purl.getUrl} \"Link to the permanent URL of this resource.\")</div>" +
      editLink.getOrElse("")
    f"<div markdown class=\"rb-top-buttons\">$inner</div>"

  def readmeHeader(repoName: String): String =
    f"""<!--
       |--
       |-- THIS FILE IS AUTOGENERATED. DO NOT EDIT.
       |-- Please edit the metadata.ttl file instead. The documentation
       |-- will be regenerated by the CI.
       |--
       |-- You can place additional docs in the /doc directory. Remember to link
       |-- to them from the description in the metadata.ttl file.
       |--
       |-->
       |[![.github/workflows/release.yaml](${Constants.baseRepoUrl}/$repoName/actions/workflows/release.yaml/badge.svg?event=push)](${Constants.baseRepoUrl}/$repoName/actions/workflows/release.yaml)
       |""".stripMargin
